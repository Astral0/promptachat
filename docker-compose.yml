version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: promptachat-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: promptachat
      MONGO_INITDB_ROOT_PASSWORD: promptachat_password_2024
      MONGO_INITDB_DATABASE: promptachat_db
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    networks:
      - promptachat-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: promptachat-backend
    restart: unless-stopped
    environment:
      - MONGO_URL=mongodb://promptachat:promptachat_password_2024@mongodb:27017/promptachat_db?authSource=admin
      - DB_NAME=promptachat_db
      - PYTHONUNBUFFERED=1
    volumes:
      - ./config.ini:/app/config.ini:ro
      - ./prompts.json:/app/prompts.json:ro
      - user_prompts_data:/app/user_prompts.json
      - user_auth_data:/app/user_auth.db
      - backend_logs:/app/logs
    ports:
      - "8001:8001"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - promptachat-network
    healthcheck:
      test: curl -f http://localhost:8001/api/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_BACKEND_URL=http://localhost:8001
    container_name: promptachat-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:8001
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - promptachat-network
    healthcheck:
      test: curl -f http://localhost:3000 || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Ollama (Optionnel - pour LLM local)
  ollama:
    image: ollama/ollama:latest
    container_name: promptachat-ollama
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - promptachat-network
    environment:
      - OLLAMA_ORIGINS=*
    healthcheck:
      test: curl -f http://localhost:11434/api/version || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # DÃ©commentez pour GPU support (NVIDIA)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [gpu]

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: promptachat-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - promptachat-network
    profiles:
      - production

volumes:
  mongodb_data:
    driver: local
  ollama_data:
    driver: local
  user_prompts_data:
    driver: local
  user_auth_data:
    driver: local
  backend_logs:
    driver: local

networks:
  promptachat-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
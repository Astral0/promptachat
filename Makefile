# Makefile pour PromptAchat
# Simplifie les commandes Docker et de d√©veloppement

.PHONY: help install start stop restart logs clean build test backup restore

# Variables
COMPOSE_FILE = docker-compose.yml
PROJECT_NAME = promptachat

# Couleurs pour l'affichage
BLUE = \033[0;34m
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

help: ## Affiche cette aide
	@echo "$(BLUE)PromptAchat - Commandes disponibles:$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)Exemples:$(NC)"
	@echo "  make install    # Installation compl√®te"
	@echo "  make start      # D√©marrer l'application"
	@echo "  make logs       # Voir les logs"
	@echo "  make stop       # Arr√™ter l'application"

install: ## Installation compl√®te avec Docker
	@echo "$(BLUE)üöÄ Installation PromptAchat...$(NC)"
	@chmod +x install.sh
	@./install.sh

setup: ## Configuration initiale (copie des fichiers template)
	@echo "$(BLUE)üìã Configuration initiale...$(NC)"
	@if [ ! -f config.ini ]; then cp config.ini.template config.ini; echo "$(GREEN)‚úÖ config.ini cr√©√©$(NC)"; fi
	@if [ ! -f user_prompts.json ]; then echo '{"internal": [], "external": []}' > user_prompts.json; echo "$(GREEN)‚úÖ user_prompts.json cr√©√©$(NC)"; fi

build: setup ## Construction des images Docker
	@echo "$(BLUE)üî® Construction des images Docker...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) build

start: ## D√©marrer l'application (Docker)
	@echo "$(BLUE)üöÄ D√©marrage PromptAchat...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) up -d
	@echo "$(GREEN)‚úÖ Application d√©marr√©e!$(NC)"
	@echo ""
	@echo "$(BLUE)üì° URLs d'acc√®s:$(NC)"
	@echo "  üåê Frontend: http://localhost:3000"
	@echo "  üîå Backend:  http://localhost:8001"
	@echo "  üìä MongoDB:  localhost:27017"
	@echo ""
	@echo "$(BLUE)üë§ Connexion par d√©faut:$(NC)"
	@echo "  Utilisateur: admin"
	@echo "  Mot de passe: admin"

start-dev: ## D√©marrer en mode d√©veloppement
	@echo "$(BLUE)üõ†Ô∏è  D√©marrage en mode d√©veloppement...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) -f docker-compose.dev.yml up -d

start-prod: ## D√©marrer en mode production (avec Nginx)
	@echo "$(BLUE)üè≠ D√©marrage en mode production...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) --profile production up -d

stop: ## Arr√™ter l'application
	@echo "$(BLUE)üõë Arr√™t de l'application...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) down
	@echo "$(GREEN)‚úÖ Application arr√™t√©e$(NC)"

restart: stop start ## Red√©marrer l'application

logs: ## Afficher les logs en temps r√©el
	@docker-compose -f $(COMPOSE_FILE) logs -f

logs-backend: ## Logs du backend uniquement
	@docker-compose -f $(COMPOSE_FILE) logs -f backend

logs-frontend: ## Logs du frontend uniquement
	@docker-compose -f $(COMPOSE_FILE) logs -f frontend

logs-mongodb: ## Logs de MongoDB
	@docker-compose -f $(COMPOSE_FILE) logs -f mongodb

status: ## Statut des conteneurs
	@echo "$(BLUE)üìä Statut des services:$(NC)"
	@docker-compose -f $(COMPOSE_FILE) ps

health: ## V√©rification de sant√© des services
	@echo "$(BLUE)üè• V√©rification de sant√©...$(NC)"
	@echo ""
	@echo "$(BLUE)Backend:$(NC)"
	@curl -s http://localhost:8001/api/health | jq . || echo "$(RED)‚ùå Backend inaccessible$(NC)"
	@echo ""
	@echo "$(BLUE)Frontend:$(NC)"
	@curl -s -o /dev/null -w "Status: %{http_code}\n" http://localhost:3000 || echo "$(RED)‚ùå Frontend inaccessible$(NC)"
	@echo ""
	@echo "$(BLUE)MongoDB:$(NC)"
	@docker-compose -f $(COMPOSE_FILE) exec -T mongodb mongosh --eval "db.adminCommand('ping')" --quiet || echo "$(RED)‚ùå MongoDB inaccessible$(NC)"

shell-backend: ## Shell dans le conteneur backend
	@docker-compose -f $(COMPOSE_FILE) exec backend /bin/bash

shell-frontend: ## Shell dans le conteneur frontend
	@docker-compose -f $(COMPOSE_FILE) exec frontend /bin/sh

shell-mongodb: ## Shell MongoDB
	@docker-compose -f $(COMPOSE_FILE) exec mongodb mongosh

update: ## Mise √† jour de l'application
	@echo "$(BLUE)üîÑ Mise √† jour PromptAchat...$(NC)"
	@git pull
	@docker-compose -f $(COMPOSE_FILE) build
	@docker-compose -f $(COMPOSE_FILE) up -d
	@echo "$(GREEN)‚úÖ Mise √† jour termin√©e$(NC)"

backup: ## Sauvegarde de la base de donn√©es
	@echo "$(BLUE)üíæ Sauvegarde de la base de donn√©es...$(NC)"
	@mkdir -p backups
	@docker-compose -f $(COMPOSE_FILE) exec -T mongodb mongodump --db promptachat_db --archive --gzip | gzip > backups/promptachat_backup_$(shell date +%Y%m%d_%H%M%S).gz
	@echo "$(GREEN)‚úÖ Sauvegarde cr√©√©e dans backups/$(NC)"

restore: ## Restaurer la base de donn√©es (n√©cessite BACKUP_FILE=path)
	@if [ -z "$(BACKUP_FILE)" ]; then echo "$(RED)‚ùå Sp√©cifiez BACKUP_FILE=path$(NC)"; exit 1; fi
	@echo "$(BLUE)üîÑ Restauration depuis $(BACKUP_FILE)...$(NC)"
	@gunzip -c $(BACKUP_FILE) | docker-compose -f $(COMPOSE_FILE) exec -T mongodb mongorestore --archive --gzip --drop
	@echo "$(GREEN)‚úÖ Restauration termin√©e$(NC)"

clean: ## Nettoyage des conteneurs et volumes
	@echo "$(YELLOW)‚ö†Ô∏è  Arr√™t et suppression des conteneurs...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) down -v
	@echo "$(YELLOW)üßπ Nettoyage des images inutilis√©es...$(NC)"
	@docker system prune -f
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

clean-all: ## Nettoyage complet (ATTENTION: supprime les donn√©es)
	@echo "$(RED)‚ö†Ô∏è  ATTENTION: Cette commande supprimera TOUTES les donn√©es!$(NC)"
	@read -p "√ätes-vous s√ªr ? [y/N] " confirm && [ "$$confirm" = "y" ]
	@docker-compose -f $(COMPOSE_FILE) down -v --remove-orphans
	@docker volume prune -f
	@docker image prune -a -f
	@echo "$(GREEN)‚úÖ Nettoyage complet termin√©$(NC)"

test: ## Ex√©cuter les tests
	@echo "$(BLUE)üß™ Ex√©cution des tests...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) exec backend python -m pytest tests/ -v
	@docker-compose -f $(COMPOSE_FILE) exec frontend yarn test --watchAll=false

install-ollama: ## Installer et configurer Ollama
	@echo "$(BLUE)ü§ñ T√©l√©chargement du mod√®le Ollama...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) exec ollama ollama pull llama3
	@echo "$(GREEN)‚úÖ Mod√®le llama3 install√©$(NC)"

monitor: ## Surveillance des ressources
	@echo "$(BLUE)üìä Surveillance des ressources:$(NC)"
	@docker stats $(PROJECT_NAME)-mongodb $(PROJECT_NAME)-backend $(PROJECT_NAME)-frontend

dev-setup: ## Configuration pour le d√©veloppement local
	@echo "$(BLUE)üõ†Ô∏è  Configuration d√©veloppement...$(NC)"
	@cd backend && python -m venv venv && source venv/bin/activate && pip install -r requirements.txt
	@cd frontend && yarn install
	@echo "$(GREEN)‚úÖ Environnement de d√©veloppement pr√™t$(NC)"
	@echo ""
	@echo "$(BLUE)Pour d√©marrer en mode d√©veloppement:$(NC)"
	@echo "  Terminal 1: cd backend && source venv/bin/activate && uvicorn server:app --reload"
	@echo "  Terminal 2: cd frontend && yarn start"

docs: ## G√©n√©rer la documentation
	@echo "$(BLUE)üìö G√©n√©ration de la documentation...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) exec backend python -c "import server; help(server)"

# Commandes par d√©faut
all: setup build start

# Si aucune commande n'est sp√©cifi√©e, afficher l'aide
.DEFAULT_GOAL := help